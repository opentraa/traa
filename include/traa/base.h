#ifndef TRAA_BASE_H
#define TRAA_BASE_H

#include <traa/error.h>

/**
 * @brief The context for TRAA.
 *
 * This is the context for TRAA.
 */
typedef void *traa_context;

/**
 * @brief The userdata for TRAA.
 *
 * This is the userdata for TRAA.
 */
typedef void *traa_userdata;

/**
 * @brief The log level for TRAA.
 *
 * This is the log level for TRAA.
 */
typedef enum traa_log_level {
  /**
   * @brief The trace log level.
   *
   * This is the trace log level.
   */
  TRAA_LOG_LEVEL_TRACE = 0,

  /**
   * @brief The debug log level.
   *
   * This is the debug log level.
   */
  TRAA_LOG_LEVEL_DEBUG = 1,

  /**
   * @brief The info log level.
   *
   * This is the info log level.
   */
  TRAA_LOG_LEVEL_INFO = 2,

  /**
   * @brief The warn log level.
   *
   * This is the warn log level.
   */
  TRAA_LOG_LEVEL_WARN = 3,

  /**
   * @brief The error log level.
   *
   * This is the error log level.
   */
  TRAA_LOG_LEVEL_ERROR = 4,

  /**
   * @brief The fatal log level.
   *
   * This is the fatal log level.
   */
  TRAA_LOG_LEVEL_FATAL = 5,

  /**
   * @brief The off log level.
   *
   * This is the off log level.
   */
  TRAA_LOG_LEVEL_OFF = 6
} traa_log_level;

/**
 * @brief Configuration options for TRAA logging.
 *
 * This struct defines the configuration options for TRAA logging. It specifies the log file,
 * maximum size of the log file, maximum number of log files, and log level.
 */
typedef struct traa_log_config {
  /**
   * @brief The log file for TRAA.
   *
   * This is the file where the log messages are written.
   * If this is set to `nullptr`, the log messages are written to the console by default, and other
   * log options are ignored when you call `traa_init` or `traa_set_log_config`.
   */
  const char *log_file;

  /**
   * @brief The maximum size of the log file.
   *
   * This is the maximum size of the log file in bytes.
   */
  int max_size;

  /**
   * @brief The maximum number of log files.
   *
   * This is the maximum number of log files that are kept.
   */
  int max_files;

  /**
   * @brief The log level for TRAA.
   *
   * This is the log level for the log messages, which defaults to `TRAA_LOG_LEVEL_INFO`.
   */
  traa_log_level level;

  traa_log_config(const char *log_file = nullptr, int max_size = 1024 * 1024 * 2, int max_files = 3,
                  traa_log_level level = TRAA_LOG_LEVEL_INFO)
      : log_file(log_file), max_size(max_size), max_files(max_files), level(level) {}
} traa_log_config;

/**
 * @brief Structure representing an event handler for TRAA.
 *
 * This structure defines a set of function pointers that can be used to handle TRAA events.
 */
typedef struct traa_event_handler {
  /**
   * @brief Function pointer for handling log messages.
   *
   * This function pointer is called when a log message is generated by TRAA.
   *
   * @param userdata The user data associated with the event handler.
   * @param level The log level of the message.
   * @param message The log message.
   */
  void (*on_error)(traa_userdata userdata, traa_error error, const char *message);

  traa_event_handler() : on_error(nullptr) {}
} traa_event_handler;

/**
 * @brief The configuration structure for the traa library.
 *
 * This structure holds the configuration options for the traa library.
 * It includes the userdata, log configuration, and event handler.
 */
typedef struct traa_config {
  /**
   * @brief The userdata associated with the traa library.
   *
   * This userdata is passed to the event handler functions.
   */
  traa_userdata userdata;

  /**
   * @brief The log configuration for the traa library.
   *
   * This configuration is used to set the log file, max size, max files, and log level.
   */
  traa_log_config log_config;

  /**
   * @brief The event handler for the traa library.
   *
   * This event handler is used to handle TRAA events.
   */
  traa_event_handler event_handler;

  traa_config() : userdata(nullptr) {}
} traa_config;

#endif // TRAA_BASE_H